services:
  # A Docker web service for Dagit
  - type: web
    name: dagit
    env: docker
    repo: https://github.com/helloworld/dagster-demo # optional
    dockerfilePath: ./dagit/Dockerfile
    dockerContext: ./dagit
    dockerCommand: ./entrypoint.sh
    region: oregon
    plan: standard
    branch: master
    healthCheckPath: /dagit_info
    envVars:
      - key: DAGSTER_PG_USERNAME
        fromDatabase:
          name: dagster_db
          property: user
      - key: DAGSTER_PG_PASSWORD
        fromDatabase:
          name: dagster_db
          property: password
      - key: DAGSTER_PG_HOST
        fromDatabase:
          name: dagster_db
          property: host
      - key: DAGSTER_PG_PORT
        fromDatabase:
          name: dagster_db
          property: port
      - key: DAGSTER_PG_DB
        fromDatabase:
          name: dagster_db
          property: database
      - key: REDIS_HOST
        fromService:
          name: redis
          type: pserv
          property: host
      - key: REDIS_PORT
        fromService:
          name: redis
          type: pserv
          property: port

  - type: pserv
    name: team_a_repository_grpc
    env: docker
    repo: https://github.com/helloworld/dagster-demo # optional
    dockerfilePath: ./team_a_repository/Dockerfile
    dockerContext: ./team_a_repository
    dockerCommand: ./entrypoint.sh
    region: oregon
    plan: standard
    branch: master
    envVars:
      - key: DAGSTER_PG_USERNAME
        fromDatabase:
          name: dagster_db
          property: user
      - key: DAGSTER_PG_PASSWORD
        fromDatabase:
          name: dagster_db
          property: password
      - key: DAGSTER_PG_HOST
        fromDatabase:
          name: dagster_db
          property: host
      - key: DAGSTER_PG_PORT
        fromDatabase:
          name: dagster_db
          property: port
      - key: DAGSTER_PG_DB
        fromDatabase:
          name: dagster_db
          property: database
      - key: REDIS_HOST
        fromService:
          name: redis
          type: pserv
          property: host
      - key: REDIS_PORT
        fromService:
          name: redis
          type: pserv
          property: port

  - type: pserv
    name: team_b_repository_grpc
    env: docker
    repo: https://github.com/helloworld/dagster-demo # optional
    dockerfilePath: ./team_b_repository/Dockerfile
    dockerContext: ./team_b_repository
    dockerCommand: ./entrypoint.sh
    region: oregon
    plan: standard
    branch: master
    envVars:
      - key: DAGSTER_PG_USERNAME
        fromDatabase:
          name: dagster_db
          property: user
      - key: DAGSTER_PG_PASSWORD
        fromDatabase:
          name: dagster_db
          property: password
      - key: DAGSTER_PG_HOST
        fromDatabase:
          name: dagster_db
          property: host
      - key: DAGSTER_PG_PORT
        fromDatabase:
          name: dagster_db
          property: port
      - key: DAGSTER_PG_DB
        fromDatabase:
          name: dagster_db
          property: database
      - key: REDIS_HOST
        fromService:
          name: redis
          type: pserv
          property: host
      - key: REDIS_PORT
        fromService:
          name: redis
          type: pserv
          property: port

  - type: pserv
    name: redis
    env: docker
    repo: https://github.com/render-examples/redis.git # optional
    envVars:
      - key: GENERATED_SECRET
        generateValue: true # will generate a base64-encoded 256-bit secret
      - key: DASHBOARD_SECRET
        sync: false # placeholder for a value to be added in the dashboard
    disk:
      name: redis-data
      mountPath: /var/lib/redis
      sizeGB: 10 # optional

  - type: web
    name: flower
    env: python
    repo: https://github.com/render-examples/celery # optional
    region: oregon
    plan: standard
    branch: master
    buildCommand: pip install -r requirements.txt
    startCommand: celery flower -A tasks -l info
    healthCheckPath: /
    envVars:
      - key: CELERY_BROKER_URL
        value: redis:10000

databases:
  - name: dagster_db
    region: oregon
    plan: standard
    ipAllowList: [] # only allow internal connections
